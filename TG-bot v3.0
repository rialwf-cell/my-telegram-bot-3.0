from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from telegram.ext.filters import Chat
import asyncio
from datetime import datetime, timedelta
import json
import os
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
GET_TEXT, GET_BUTTONS, LABYRINTH_GAME = range(3)

# üÜïüëáüëáüëá –ó–î–ï–°–¨ –¢–ï–ë–ï –ù–£–ñ–ù–û –í–ü–ò–°–ê–¢–¨ –°–í–û–ò –î–ê–ù–ù–´–ï üëáüëáüëá
BOT_TOKEN = "**********************"  # ‚Üê –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_IDS = [*************]  # ‚Üê –¢–≤–æ–π ID (–∏ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
CHANNEL_USERNAME = "*****************"  # ‚Üê Username —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
CHANNEL_CHAT_ID = -100***********  # ‚Üê ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
GROUP_CHAT_ID = -1002**************    # ‚Üê ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã (–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–∫–∏)
# üéØ –°–Æ–î–ê –í–ü–ò–®–ò ID –¢–ï–ú–´ (–¢–û–ü–ò–ö–ê) –í –ì–†–£–ü–ü–ï:
SUGGESTION_TOPIC_ID = *****  # ‚Üê üîÅ –ó–ê–ú–ï–ù–ò –≠–¢–û –ß–ò–°–õ–û –ù–ê –†–ï–ê–õ–¨–ù–´–ô ID –¢–ï–ú–´
# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ADMIN_CHAT_ID –æ–±—ä—è–≤–ª–µ–Ω –ü–û–°–õ–ï GROUP_CHAT_ID
ADMIN_CHAT_ID = GROUP_CHAT_ID  # üÜï –ü—Ä–µ–¥–ª–æ–∂–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É
# üÜïüî•üî•üî• –û–ß–ï–ù–¨ –í–ê–ñ–ù–û: –£–ö–ê–ó–ê–ù ID –ß–ê–¢–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ‚Äî –ù–ï –ù–£–ñ–ù–û –ú–ï–ù–Ø–¢–¨!
COMMENTS_CHAT_ID = -***************  # ID —á–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞
# üÜïüëÜüëÜüëÜ –í–°–Å, –ß–¢–û –ù–£–ñ–ù–û –ù–ê–°–¢–†–û–ò–¢–¨ ‚Äî –í–´–®–ï –≠–¢–û–ô –°–¢–†–û–ö–ò üëÜüëÜüëÜ

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
STATS_FILE = "bot_stats.json"
USERS_FILE = "bot_users.json"
POSTS_FILE = "bot_posts.json"
MIRROR_MAP_FILE = "mirror_map.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∫–∏ ID
PROMOS_FILE = "promos.txt"

# –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–ª–∞–≥: –ª–∏–º–∏—Ç –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ —Å—É—Ç–∫–∏
# False ‚Äî –ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á–µ–Ω (–¥–ª—è —Ç–µ—Å—Ç–æ–≤), True ‚Äî –ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω
LABYRINTH_DAILY_LIMIT_ENABLED = False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ë–ï–ó –≠–ú–û–î–ó–ò –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö)
ADMIN_KEYBOARD = ReplyKeyboardMarkup([
    ["–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
    ["–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"]
], resize_keyboard=True)

# ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ö–Ω–æ–ø–∫–∞ "üîê –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" —Ç–µ–ø–µ—Ä—å –í–°–ï–ì–î–ê –≤–∏–¥–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
USER_KEYBOARD = ReplyKeyboardMarkup([
    ["–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "–ò–≥—Ä–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç"],
    ["–ü–æ–º–æ—â—å", "üîê –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]
], resize_keyboard=True)

# ===== –°–ò–°–¢–ï–ú–ê –°–í–Ø–ó–ö–ò ID –ü–û–°–¢–û–í =====
def load_mirror_map():
    if os.path.exists(MIRROR_MAP_FILE):
        try:
            with open(MIRROR_MAP_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return {}

def save_mirror_map(mirror_map):
    with open(MIRROR_MAP_FILE, 'w', encoding='utf-8') as f:
        json.dump(mirror_map, f, ensure_ascii=False, indent=2)

# üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç set ‚Üí list —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
def convert_sets_to_lists(obj):
    if isinstance(obj, set):
        return list(obj)
    elif isinstance(obj, dict):
        return {k: convert_sets_to_lists(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [convert_sets_to_lists(i) for i in obj]
    else:
        return obj

# ===== –°–ò–°–¢–ï–ú–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ü–û–°–¢–û–í =====
def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if 'active_users' in data and isinstance(data['active_users'], list):
                    data['active_users'] = set(data['active_users'])
                return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    return {
        "total_suggestions": 0,
        "published": 0,
        "rejected": 0,
        "today_suggestions": 0,
        "today_date": datetime.now().strftime("%Y-%m-%d"),
        "users_count": 0,
        "active_users": set()
    }

def save_stats(stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
    stats_copy = stats.copy()
    if 'active_users' in stats_copy and isinstance(stats_copy['active_users'], set):
        stats_copy['active_users'] = list(stats_copy['active_users'])
    with open(STATS_FILE, 'w', encoding='utf-8') as f:
        json.dump(stats_copy, f, ensure_ascii=False, indent=2)

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return {}

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def load_posts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤"""
    if os.path.exists(POSTS_FILE):
        try:
            with open(POSTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return {}

def save_posts(posts):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤"""
    with open(POSTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(posts, f, ensure_ascii=False, indent=2)

def update_user_stats(user_id, user_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = load_users()
    stats = load_stats()
    if str(user_id) not in users:
        users[str(user_id)] = {
            "name": user_name,
            "first_seen": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "suggestions_count": 0
        }
        stats['users_count'] = len(users)
    if 'active_users' not in stats:
        stats['active_users'] = set()
    stats['active_users'].add(str(user_id))
    save_users(users)
    save_stats(stats)

def update_suggestion_stats(user_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–∫"""
    stats = load_stats()
    users = load_users()
    today = datetime.now().strftime("%Y-%m-%d")
    if stats['today_date'] != today:
        stats['today_date'] = today
        stats['today_suggestions'] = 0
    stats['total_suggestions'] += 1
    stats['today_suggestions'] += 1
    if user_id and str(user_id) in users:
        users[str(user_id)]['suggestions_count'] = users[str(user_id)].get('suggestions_count', 0) + 1
    save_stats(stats)
    save_users(users)

def add_post_to_history(post_id, post_text):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    posts = load_posts()
    posts[post_id] = {
        "text": post_text[:100] + "..." if len(post_text) > 100 else post_text,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "comments": 0
    }
    save_posts(posts)

async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# ===== –ì–ï–ù–ï–†–ê–¢–û–† –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò (–ë–ï–ó –≠–ú–û–î–ó–ò) =====
def generate_bot_comment_buttons(bot_username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º ‚Äî –ë–ï–ó –≠–ú–û–î–ó–ò, –ö–ù–û–ü–ö–ò –í –°–¢–û–õ–ë–ò–ö"""
    text = "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"
    buttons = [
        [InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∫–∞", url=f"https://t.me/{bot_username}?start=suggest")],
        [InlineKeyboardButton("–ù–∞–≤–∏–≥–∞—Ü–∏—è", url="https://t.me/RialEldChron/711")],
        [InlineKeyboardButton("Rampage", url="https://t.me/RialEldChron")]
    ]
    return text, InlineKeyboardMarkup(buttons)

# ===== –õ–û–í–ò–ú –ó–ï–†–ö–ê–õ–û –ü–û–°–¢–ê –í –ß–ê–¢–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í =====
async def handle_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–µ—Ä–∫–∞–ª–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        if not update.message:
            return
        if update.message.chat.id != COMMENTS_CHAT_ID:
            return
        if not getattr(update.message, 'is_automatic_forward', False):
            return

        channel_post_id = None
        if hasattr(update.message, 'forward_origin') and update.message.forward_origin:
            origin = update.message.forward_origin
            if hasattr(origin, 'chat') and origin.chat and origin.chat.id == CHANNEL_CHAT_ID:
                if hasattr(origin, 'message_id'):
                    channel_post_id = origin.message_id

        if not channel_post_id:
            channel_post_id = getattr(update.message, 'forward_from_message_id', None)

        chat_message_id = update.message.message_id

        if not channel_post_id:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {chat_message_id}")
            return

        mirror_map = load_mirror_map()
        mirror_map[str(channel_post_id)] = chat_message_id
        save_mirror_map(mirror_map)
        print(f"üîó –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–≤—è–∑–∫–∞: –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ {channel_post_id} ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {chat_message_id}")

        pending_comments = context.bot_data.get('pending_comments', {})
        key = str(channel_post_id)
        if key in pending_comments:
            data = pending_comments[key]
            comment_text = data['text']
            reply_markup = data['reply_markup']
            try:
                await context.bot.send_message(
                    chat_id=COMMENTS_CHAT_ID,
                    text=comment_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML',
                    reply_to_message_id=chat_message_id
                )
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∑–µ—Ä–∫–∞–ª–æ {chat_message_id}")
                del pending_comments[key]
                context.bot_data['pending_comments'] = pending_comments
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e}")
        else:
            print(f"‚ÑπÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {channel_post_id} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_chat_message: {e}")

# ===== –°–ß–Å–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í –ß–ê–¢–ï –ó–ï–†–ö–ê–õ (–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í) –ó–ê 7 –î–ù–ï–ô =====
async def handle_group_message_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ COMMENTS_CHAT_ID –ø–æ –¥–Ω—è–º (YYYY-MM-DD)."""
    try:
        if not update.message:
            return
        if update.message.chat.id != COMMENTS_CHAT_ID:
            return

        user = update.effective_user
        if not user:
            return

        users = load_users()
        u = users.setdefault(str(user.id), {
            "name": user.first_name,
            "first_seen": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "suggestions_count": 0
        })
        if not u.get("name"):
            u["name"] = user.first_name

        today = datetime.now().strftime('%Y-%m-%d')
        msg_counts = u.setdefault('msg_counts', {})
        msg_counts[today] = msg_counts.get(today, 0) + 1
        save_users(users)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_message_stats: {e}")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–°–¢–ê –ò–ó –ö–ê–ù–ê–õ–ê ‚Äî –ë–ï–ó –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò =====
async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–±–µ–∑ –¥—É–±–ª–µ–π)"""
    try:
        if not update.channel_post:
            return
        if update.channel_post.chat.id != CHANNEL_CHAT_ID:
            return

        post_message = update.channel_post
        post_text = post_message.text or post_message.caption or "–ú–µ–¥–∏–∞-–ø–æ—Å—Ç"
        print(f"üì® –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {post_message.message_id}")

        bot = await context.bot.get_me()
        bot_username = bot.username
        comment_text, reply_markup = generate_bot_comment_buttons(bot_username)

        if 'pending_comments' not in context.bot_data:
            context.bot_data['pending_comments'] = {}

        context.bot_data['pending_comments'][str(post_message.message_id)] = {
            'text': comment_text,
            'reply_markup': reply_markup
        }

        add_post_to_history(post_message.message_id, post_text)
        stats = load_stats()
        stats['published'] = stats.get('published', 0) + 1
        save_stats(stats)
        print(f"‚è≥ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {post_message.message_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

# ===== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def debug_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not await is_admin(update.effective_user.id):
        return
    mirror_map = load_mirror_map()
    debug_text = f"""
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:</b>
üîß ID –∫–∞–Ω–∞–ª–∞: <code>{CHANNEL_CHAT_ID}</code>
üîß ID —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: <code>{COMMENTS_CHAT_ID}</code>
üîß ID –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–∫: <code>{GROUP_CHAT_ID}</code>
üîß Username –∫–∞–Ω–∞–ª–∞: @{CHANNEL_USERNAME}
üîó –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):
"""
    count = 0
    for k, v in list(mirror_map.items())[-5:]:
        debug_text += f"\n‚Ä¢ –ö–∞–Ω–∞–ª {k} ‚Üí –ß–∞—Ç {v}"
        count += 1
    if count == 0:
        debug_text += "\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫"
    await update.message.reply_text(debug_text, parse_mode='HTML')

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not update.message or not update.effective_user:
        return
    if update.message.chat.type != 'private':
        return

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    update_user_stats(user_id, user_name)

    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(welcome_text, reply_markup=USER_KEYBOARD)

# ===== –ò–ì–†–ê "–õ–ê–ë–ò–†–ò–ù–¢" =====
EVENTS_DATA = {
    'neutral': [
        {"text": "–¢–∏—Ö–∏–π –∫–æ—Ä–∏–¥–æ—Ä —Ç—è–Ω–µ—Ç—Å—è –≤–ø–µ—Ä—ë–¥. –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.", "image": "neutral_1.jpg"},
        {"text": "–í—ã –∏–¥—ë—Ç–µ –≤–¥–æ–ª—å —Å—ã—Ä–æ–π —Å—Ç–µ–Ω—ã. –ö–∞–∂–µ—Ç—Å—è —Å–ø–æ–∫–æ–π–Ω–æ.", "image": "neutral_2.jpg"}
    ],
    'damage': [
        {"text": "–ù–µ–∑–∞–º–µ—Ç–Ω–∞—è –ª–æ–≤—É—à–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É—Ä–æ–Ω.", "image": "damage_1.jpg"},
        {"text": "–ò–∑ —Ç—å–º—ã –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –∫–∞–º–µ–Ω—å. –ë–æ–ª—å–Ω–æ.", "image": "damage_2.jpg"},
        {"text": "–ü–æ–ª –æ—Å–µ–¥–∞–µ—Ç. –ü–∞–¥–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—è–µ—Ç –≤—Ä–µ–¥.", "image": "damage_3.jpg"}
    ],
    'heal': [
        {"text": "–ù–∞—Ö–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥—É—Ö. –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ª—É—á—à–µ.", "image": "heal_1.jpg"},
        {"text": "–°–≤–µ—Ç–ª—ã–π —É—á–∞—Å—Ç–æ–∫ –ø—É—Ç–∏ –ø—Ä–∏–¥–∞—ë—Ç —Å–∏–ª.", "image": "heal_2.jpg"}
    ],
    'treasure': [
        {"text": "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –¥—Ä–µ–≤–Ω–∏–π —Å—É–Ω–¥—É–∫. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?", "image": "treasure.jpg"}
    ]
}

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
EVENT_WEIGHTS = [0.31, 0.31, 0.31, 0.07]  # neutral, damage, heal, treasure
DAMAGE_DISTRIBUTION = [0.5, 0.3, 0.2]     # –ø–æ—Ç–µ—Ä—è 1/2/3
HEAL_DISTRIBUTION = [0.6, 0.4]            # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 1/2

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
class GameState:
    def __init__(self):
        self.user_states = {}

    def init_user(self, user_id):
        self.user_states[user_id] = {
            'hp': 10,
            'step': 0,
            'message_history': [],
            'last_played': datetime.now().strftime('%Y-%m-%d'),
            'max_steps': 10,
            'used_events': set(),
            'treasure_pending': False
        }

    def delete_progress(self, user_id):
        if user_id in self.user_states:
            del self.user_states[user_id]

game_state = GameState()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
def get_promo_code():
    try:
        with open(PROMOS_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        if not lines:
            return None
        promo = lines[0].strip()
        with open(PROMOS_FILE, 'w', encoding='utf-8') as f:
            f.writelines(lines[1:])
        return promo
    except FileNotFoundError:
        return None

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ü–´–¢–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ì–†–´ =====
def is_experienced_player(user_id: int) -> bool:
    users = load_users()
    u = users.get(str(user_id), {})
    wins = u.get('labyrinth_wins', 0)
    plays = u.get('labyrinth_plays', 0)
    return wins >= 1 or plays >= 5

def increment_user_counter(user_id: int, field: str, inc: int = 1):
    users = load_users()
    u = users.setdefault(str(user_id), {})
    u[field] = u.get(field, 0) + inc
    save_users(users)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id):
    if user_id in game_state.user_states:
        for msg_id in game_state.user_states[user_id]['message_history']:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.error(f"Error deleting message: {e}")
        game_state.user_states[user_id]['message_history'] = []

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
async def start_labyrinth_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∏–≥—Ä–∞ –≤ —Å—É—Ç–∫–∏ (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥–æ–º LABYRINTH_DAILY_LIMIT_ENABLED)
    users = load_users()
    today = datetime.now().strftime('%Y-%m-%d')
    last = users.get(str(user_id), {}).get('last_labyrinth')
    if LABYRINTH_DAILY_LIMIT_ENABLED and last == today:
        await update.message.reply_text("–í—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return ConversationHandler.END

    await delete_messages(update, context, user_id)
    game_state.init_user(user_id)
    increment_user_counter(user_id, 'labyrinth_plays', 1)
    msg = await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç. –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: 10/10. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=ReplyKeyboardMarkup([["–ù–∞–ª–µ–≤–æ", "–ü—Ä—è–º–æ", "–ù–∞–ø—Ä–∞–≤–æ", "–í –º–µ–Ω—é"]], one_time_keyboard=True)
    )
    game_state.user_states[user_id]['message_history'].append(msg.message_id)
    return LABYRINTH_GAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
async def handle_labyrinth_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = game_state.user_states.get(user_id)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not state or 'step' not in state or 'hp' not in state:
        logger.warning(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫.")
        return await start_labyrinth_game(update, context)

    user_message = update.message.text

    # –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
    if user_message == "–í –º–µ–Ω—é":
        await delete_messages(update, context, user_id)
        game_state.delete_progress(user_id)
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=USER_KEYBOARD)
        return ConversationHandler.END

    # –†–∞–∑–≤–∏–ª–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è "—Å–æ–∫—Ä–æ–≤–∏—â–µ"
    if state.get('treasure_pending'):
        if user_message == "–ü—Ä–æ–π—Ç–∏ –º–∏–º–æ":
            state['treasure_pending'] = False
            state['step'] += 1
        elif user_message == "–ó–∞–±—Ä–∞—Ç—å —Å–æ–∫—Ä–æ–≤–∏—â–µ":
            await delete_messages(update, context, user_id)
            users = load_users()
            users.setdefault(str(user_id), {})['last_labyrinth'] = datetime.now().strftime('%Y-%m-%d')
            save_users(users)
            game_state.delete_progress(user_id)
            image_path = os.path.join("images", "treasure.jpg")
            if os.path.exists(image_path):
                await update.message.reply_photo(photo=open(image_path, 'rb'), caption="–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞.", reply_markup=USER_KEYBOARD)
            else:
                await update.message.reply_text("–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞.", reply_markup=USER_KEYBOARD)
            return ConversationHandler.END
        else:
            return ConversationHandler.END if user_message == "–í –º–µ–Ω—é" else LABYRINTH_GAME

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if user_message not in ("–ù–∞–ª–µ–≤–æ", "–ü—Ä—è–º–æ", "–ù–∞–ø—Ä–∞–≤–æ"):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ù–∞–ª–µ–≤–æ, –ü—Ä—è–º–æ –∏–ª–∏ –ù–∞–ø—Ä–∞–≤–æ.")
        return LABYRINTH_GAME

    # –í—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –ø–æ –≤–µ—Å–∞–º, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    def pick_event():
        # –ë–∞–∑–æ–≤—ã–π –≤—ã–±–æ—Ä –ø–æ –≤–µ—Å–∞–º
        types = ['neutral', 'damage', 'heal', 'treasure']
        chosen = random.choices(types, weights=EVENT_WEIGHTS, k=1)[0]

        # –ú–µ—Ö–∞–Ω–∏–∫–∞ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏—è: –æ–ø—ã—Ç–Ω—ã–π 45%, –Ω–æ–≤–∏—á–æ–∫ 24%
        experienced = is_experienced_player(user_id)
        foresee_prob = 0.45 if experienced else 0.24
        if chosen == 'damage' and random.random() < foresee_prob:
            # –ó–∞–º–µ–Ω—è–µ–º –æ–ø–∞—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ (neutral/heal) –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —à–∞–Ω—Å–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è
            chosen = random.choices(['neutral', 'heal'], weights=[0.5, 0.5], k=1)[0]

        used = state.get('used_events', set())
        pool = [e for e in EVENTS_DATA[chosen] if e['image'] not in used]
        if not pool:
            pool = EVENTS_DATA[chosen][:]
        return chosen, random.choice(pool)

    etype, edata = pick_event()
    state['used_events'].add(edata['image'])

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—è—Å–Ω—è—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    effect_note = ""
    if etype == 'damage':
        dmg = random.choices([1, 2, 3], weights=DAMAGE_DISTRIBUTION, k=1)[0]
        state['hp'] -= dmg
        effect_note = f"\n–ü–æ—Ç–µ—Ä—è –∑–¥–æ—Ä–æ–≤—å—è: -{dmg} HP"
    elif etype == 'heal':
        heal = random.choices([1, 2], weights=HEAL_DISTRIBUTION, k=1)[0]
        state['hp'] += heal
        effect_note = f"\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è: +{heal} HP"

    # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
    if state['hp'] <= 0:
        await delete_messages(update, context, user_id)
        users = load_users()
        users.setdefault(str(user_id), {})['last_labyrinth'] = datetime.now().strftime('%Y-%m-%d')
        save_users(users)
        game_state.delete_progress(user_id)
        image_path = os.path.join("images", "lose.jpg")
        if os.path.exists(image_path):
            await update.message.reply_photo(photo=open(image_path, 'rb'), caption="–í—ã –ø–æ–≥–∏–±–ª–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.", reply_markup=USER_KEYBOARD)
        else:
            await update.message.reply_text("–í—ã –ø–æ–≥–∏–±–ª–∏ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.", reply_markup=USER_KEYBOARD)
        return ConversationHandler.END

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞
    if etype == 'treasure':
        state['treasure_pending'] = True
        keyboard = [["–ü—Ä–æ–π—Ç–∏ –º–∏–º–æ", "–ó–∞–±—Ä–∞—Ç—å —Å–æ–∫—Ä–æ–≤–∏—â–µ"], ["–í –º–µ–Ω—é"]]
        image_path = os.path.join("images", edata.get("image", ""))
        if edata.get("image") and os.path.exists(image_path):
            msg = await update.message.reply_photo(photo=open(image_path, 'rb'), caption=edata["text"], reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
        else:
            msg = await update.message.reply_text(edata["text"], reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
        state['message_history'].append(msg.message_id)
        return LABYRINTH_GAME

    # –®–∞–≥ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
    state['step'] += 1

    # –ü–æ–±–µ–¥–∞
    if state['step'] >= state['max_steps']:
        await delete_messages(update, context, user_id)
        users = load_users()
        users.setdefault(str(user_id), {})['last_labyrinth'] = datetime.now().strftime('%Y-%m-%d')
        save_users(users)
        increment_user_counter(user_id, 'labyrinth_wins', 1)
        game_state.delete_progress(user_id)
        promo = get_promo_code()
        text = f"–í—ã –ø—Ä–æ—à–ª–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç. –ü—Ä–æ–º–æ–∫–æ–¥: {promo}" if promo else "–í—ã –ø—Ä–æ—à–ª–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç, –Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."
        image_path = os.path.join("images", "win.jpg")
        if os.path.exists(image_path):
            await update.message.reply_photo(photo=open(image_path, 'rb'), caption=text, reply_markup=USER_KEYBOARD)
        else:
            await update.message.reply_text(text, reply_markup=USER_KEYBOARD)
        return ConversationHandler.END

    # –°–ª–µ–¥—É—é—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
    keyboard = [["–ù–∞–ª–µ–≤–æ", "–ü—Ä—è–º–æ", "–ù–∞–ø—Ä–∞–≤–æ", "–í –º–µ–Ω—é"]]
    status = f"–ó–¥–æ—Ä–æ–≤—å–µ: {state['hp']}/10"
    image_path = os.path.join("images", edata.get("image", ""))
    caption = f"{edata['text']}{effect_note}\n\n{status}"
    if edata.get("image") and os.path.exists(image_path):
        msg = await update.message.reply_photo(photo=open(image_path, 'rb'), caption=caption, reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    else:
        msg = await update.message.reply_text(caption, reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    state['message_history'].append(msg.message_id)
    return LABYRINTH_GAME

# ‚ö†Ô∏è –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –§–£–ù–ö–¶–ò–ô ‚Äî —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –†–ê–ë–û–¢–ê–Æ–¢
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if not update.effective_user or not await is_admin(update.effective_user.id):
        return
    # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ COMMENTS_CHAT_ID
    users = load_users()
    cutoff = (datetime.now() - timedelta(days=6)).strftime('%Y-%m-%d')
    # –°–æ–±–∏—Ä–∞–µ–º —Å—É–º–º—ã
    ranking = []  # (count, user_id, name)
    for uid, u in users.items():
        msg_counts = u.get('msg_counts', {})
        total7 = 0
        for day, cnt in msg_counts.items():
            if day >= cutoff:
                try:
                    total7 += int(cnt)
                except Exception:
                    continue
        if total7 > 0:
            ranking.append((total7, int(uid), u.get('name') or str(uid)))
    ranking.sort(reverse=True, key=lambda x: x[0])

    if not ranking:
        await update.message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.")
        return

    # –ì–æ—Ç–æ–≤–∏–º –≤—ã–≤–æ–¥
    lines = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ 7 –¥–Ω–µ–π (—á–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤):"]
    for idx, (cnt, uid, name) in enumerate(ranking, start=1):
        display = f"{name} (id {uid})" if name else f"id {uid}"
        lines.append(f"{idx}. {display}: {cnt}")
    text = "\n".join(lines[:100])
    await update.message.reply_text(text)

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê
async def create_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if not update.effective_user or not await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤.")
        return ConversationHandler.END
    await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    return GET_TEXT

async def get_post_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_text'] = update.message.text
    await update.message.reply_text("üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ö–Ω–æ–ø–∫–∞ 1 - https://example.com`\n–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ë–µ–∑ –∫–Ω–æ–ø–æ–∫'.")
    return GET_BUTTONS

async def process_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = context.user_data.get('post_text', '–¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω')
    buttons_text = update.message.text

    reply_markup = None
    if buttons_text.strip().lower() != '–±–µ–∑ –∫–Ω–æ–ø–æ–∫':
        try:
            button_rows = []
            for line in buttons_text.split('\n'):
                if ' - ' in line:
                    label, url = line.split(' - ', 1)
                    button_rows.append([InlineKeyboardButton(label.strip(), url=url.strip())])
            if button_rows:
                reply_markup = InlineKeyboardMarkup(button_rows)
        except Exception:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return GET_BUTTONS

    try:
        sent_message = await context.bot.send_message(
            chat_id=CHANNEL_CHAT_ID,
            text=text,
            reply_markup=reply_markup,
            disable_web_page_preview=False
        )
        add_post_to_history(sent_message.message_id, text)
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

    return ConversationHandler.END

async def cancel_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: handle_media ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ ‚Äî –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'"""
    if not update.message or not update.effective_user:
        return
    if update.message.chat.type != 'private':
        return

    user = update.effective_user
    user_id = user.id

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –ø—Ä–µ–¥–ª–æ–∂–∫–∏
    if not context.user_data.get('awaiting_suggestion', False):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∏

    update_suggestion_stats(user.id)

    media_type = "–§–û–¢–û"
    if update.message.video:
        media_type = "–í–ò–î–ï–û"
    elif update.message.document:
        media_type = "–î–û–ö–£–ú–ï–ù–¢"

    report_text = f"""
üì• –ù–û–í–ê–Ø –ü–†–ï–î–õ–û–ñ–ö–ê (–ú–ï–î–ò–ê)
‚îú‚îÄ –û—Ç: {user.first_name} (@{user.username or '–±–µ–∑ username'})
‚îú‚îÄ ID: {user.id}
‚îî‚îÄ –¢–∏–ø: {media_type}
"""

    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É {ADMIN_CHAT_ID}, —Ç–µ–º–∞ {SUGGESTION_TOPIC_ID}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=report_text, message_thread_id=SUGGESTION_TOPIC_ID)
        await update.message.forward(chat_id=ADMIN_CHAT_ID, message_thread_id=SUGGESTION_TOPIC_ID)
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚îÄ" * 40, message_thread_id=SUGGESTION_TOPIC_ID)
        await update.message.reply_text("‚úÖ –ü–æ–ª—É—á–∏–ª! –¢–≤–æ—è –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ! üí´", reply_markup=USER_KEYBOARD)
        context.user_data['awaiting_suggestion'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_media: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user:
        return
    if update.message.chat.type != 'private':
        return

    user_id = update.effective_user.id
    user_message = update.message

    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîê –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" ‚Äî –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_message.text == "üîê –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        if await is_admin(user_id):
            await update.message.reply_text("‚úÖ <b>–î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!", parse_mode='HTML', reply_markup=ADMIN_KEYBOARD)
        else:
            await update.message.reply_text("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode='HTML', reply_markup=USER_KEYBOARD)
        return

    if user_message.text == "–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º":
        await update.message.reply_text("üîì <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º</b>", parse_mode='HTML', reply_markup=USER_KEYBOARD)
        return

    # ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ø—Ä–µ–¥–ª–æ–∂–∫–∏
    if user_message.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å":
        context.user_data['awaiting_suggestion'] = True
        await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ñ—Ä–∞–ø—Å)!")
        return

    if user_message.text == "–ü–æ–º–æ—â—å":
        await update.message.reply_text("‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n‚Ä¢ –Ø –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\nüìå –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º!", parse_mode='HTML')
        return

    # üî• –ò–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ConversationHandler ‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
    if user_message.text == "–ò–≥—Ä–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç":
        return

    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    if await is_admin(user_id):
        if user_message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await show_statistics(update, context)
            return
        elif user_message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            await show_users(update, context)
            return
        elif user_message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await show_settings(update, context)
            return
        elif user_message.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç":
            return await create_post(update, context)

    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø—Ä–µ–¥–ª–æ–∂–∫–∏ ‚Äî –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º
    if context.user_data.get('awaiting_suggestion', False):
        try:
            user = update.effective_user
            update_suggestion_stats(user.id)
            report_text = f"""
üì• –ù–û–í–ê–Ø –ü–†–ï–î–õ–û–ñ–ö–ê
‚îú‚îÄ –û—Ç: {user.first_name} (@{user.username or '–±–µ–∑ username'})
‚îú‚îÄ ID: {user.id}
‚îî‚îÄ –¢–∏–ø: –¢–ï–ö–°–¢
üëá –°–û–î–ï–†–ñ–ò–ú–û–ï:
{user_message.text}
"""
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É {ADMIN_CHAT_ID}, —Ç–µ–º–∞ {SUGGESTION_TOPIC_ID}")
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=report_text, message_thread_id=SUGGESTION_TOPIC_ID)
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚îÄ" * 40, message_thread_id=SUGGESTION_TOPIC_ID)
            await update.message.reply_text("‚úÖ –ü–æ–ª—É—á–∏–ª! –¢–≤–æ—è –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ! üí´", reply_markup=USER_KEYBOARD)
            context.user_data['awaiting_suggestion'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ë–ï–ó –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
    return

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====
def main():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for file, default in [
        (STATS_FILE, load_stats()),
        (USERS_FILE, {}),
        (POSTS_FILE, {}),
        (MIRROR_MAP_FILE, {})
    ]:
        if not os.path.exists(file):
            safe_default = convert_sets_to_lists(default)
            with open(file, 'w', encoding='utf-8') as f:
                json.dump(safe_default, f, ensure_ascii=False, indent=2)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É images, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("images"):
        os.makedirs("images")
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ 'images'")

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    application.add_handler(MessageHandler(Chat(COMMENTS_CHAT_ID), handle_chat_message, block=False))
    application.add_handler(MessageHandler(filters.ChatType.CHANNEL, handle_channel_post))

    # –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞): —É—á–∏—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö
    application.add_handler(
        MessageHandler(
            filters.Chat(COMMENTS_CHAT_ID) & ~filters.StatusUpdate.ALL,
            handle_group_message_stats,
            block=False
        )
    )

    # –ò–≥—Ä–∞ "–õ–∞–±–∏—Ä–∏–Ω—Ç"
    labyrinth_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ò–≥—Ä–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç$"), start_labyrinth_game)],
        states={
            LABYRINTH_GAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_labyrinth_choice)]
        },
        fallbacks=[],
        allow_reentry=True
    )
    application.add_handler(labyrinth_handler)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ ‚Äî ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç$"), create_post)],
        states={
            GET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_post_text)],
            GET_BUTTONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_buttons)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ$"), cancel_creation)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("debug", debug_info))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üí¨ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ü–û–î –ü–û–°–¢–ê–ú–ò –≤ –∫–∞–Ω–∞–ª–µ")
    print(f"üìç ID –∫–∞–Ω–∞–ª–∞: {CHANNEL_CHAT_ID}")
    print(f"üìç ID —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {COMMENTS_CHAT_ID}")
    print(f"üìç ID –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–∫: {GROUP_CHAT_ID}")
    print(f"üìå –ü—Ä–µ–¥–ª–æ–∂–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤ —Ç–µ–º—É ID: {SUGGESTION_TOPIC_ID}")
    print("‚úÖ –ü—Ä–æ—Å—Ç–æ –æ–ø—É–±–ª–∏–∫—É–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ ‚Äî –±–æ—Ç —Å–∞–º –Ω–∞–π–¥—ë—Ç –µ–≥–æ –≤ —á–∞—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Å–¥–µ–ª–∞–µ—Ç —Ä–µ–ø–ª–∞–π")
    print("üéÆ –ò–≥—Ä–∞ '–õ–∞–±–∏—Ä–∏–Ω—Ç –°–º–µ—Ä—Ç–∏' –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")

    application.run_polling()

if __name__ == "__main__":
    main()
